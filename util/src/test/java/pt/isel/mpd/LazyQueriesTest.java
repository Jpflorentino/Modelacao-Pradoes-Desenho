/*
 * GNU General Public License v3.0
 *
 * Copyright (c) 2020, Miguel Gamboa (gamboa.pt)
 *
 *   All rights granted under this License are granted for the term of
 * copyright on the Program, and are irrevocable provided the stated
 * conditions are met.  This License explicitly affirms your unlimited
 * permission to run the unmodified Program.  The output from running a
 * covered work is covered by this License only if the output, given its
 * content, constitutes a covered work.  This License acknowledges your
 * rights of fair use or other equivalent, as provided by copyright law.
 *
 *   You may make, run and propagate covered works that you do not
 * convey, without conditions so long as your license otherwise remains
 * in force.  You may convey covered works to others for the sole purpose
 * of having them make modifications exclusively for you, or provide you
 * with facilities for running those works, provided that you comply with
 * the terms of this License in conveying all material for which you do
 * not control copyright.  Those thus making or running the covered works
 * for you must do so exclusively on your behalf, under your direction
 * and control, on terms that prohibit them from making any copies of
 * your copyrighted material outside their relationship with you.
 *
 *   Conveying under any other circumstances is permitted solely under
 * the conditions stated below.  Sublicensing is not allowed; section 10
 * makes it unnecessary.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pt.isel.mpd;

import org.junit.Test;

import java.util.*;
import java.util.function.Function;

import static java.util.Arrays.asList;
import static org.junit.Assert.*;
import static pt.isel.mpd.util.LazyQueries.*;

public class LazyQueriesTest {

    //done
    @Test
    public void testGenerate() {
        Random number = new Random();
        Iterable<Integer> num = limit(generate(() -> number.nextInt(10)), 4);
        num.forEach(System.out::println);
    }

    //done
    @Test
    public void testIterate() {
        Iterable<Integer> expected = asList(1, 2, 3, 4, 5);
        Iterable<Integer> actual = limit(iterate(1, v -> v + 1), 5);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testFilter() {
        Iterable<Integer> expected = asList(2, 4, 6);
        Iterable<Integer> number = asList(1, 2, 3, 4, 5, 6);
        Iterable<Integer> actual = filter(number, n -> n % 2 == 0);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testSkip() {
        Iterable<Integer> expected = asList(4, 5, 6);
        Iterable<Integer> number = asList(1, 2, 3, 4, 5, 6);
        Iterable<Integer> actual = skip(number, 3);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testLimit() {
        Iterable<Integer> expected = asList(1, 2, 3, 4);
        Iterable<Integer> number = asList(1, 2, 3, 4, 5, 6);
        Iterable<Integer> actual = limit(number, 4);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testMap() {
        Iterable<Integer> expected = asList(9, 4, 9);
        Iterable<String> names = asList("Francisco", "Joao", "Margarida");
        Iterable<Integer> actual = map(names, String::length);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testCount() {
        Integer expected = 5;
        Iterable<Integer> number = asList(1, 2, 3, 4, 5);
        Integer actual = count(number);
        System.out.println(actual);
        assertEquals(expected, actual);
    }

    //done
    @Test
    public void testToArray() {
        Object[] expected = new Object[]{"Francisco", "Joao", "Margarida"};
        Iterable<String> names = asList("Francisco", "Joao", "Margarida");
        Object[] actual = toArray(names);
        for (Object element : actual) {
            System.out.println(element);
        }
        assertArrayEquals(expected, actual);
    }

    //done
    @Test
    public void testFirst() {
        Optional<Integer> expected = Optional.of(1);
        Iterable<Integer> number = asList(1, 2, 3, 4, 5, 6);
        Optional<Integer> actual = first(number);
        System.out.println(actual.get());
        assertEquals(expected.get(), actual.get());
    }

    //done
    @Test
    public void testMax() {
        Optional<Integer> expected = Optional.of(10);
        Iterable<Integer> number = asList(1, 4, 10, 2, 7, 9);
        Optional<Integer> actual = max(number, (p1, p2) -> p1 - p2);
        System.out.println(actual.get());
        assertEquals(expected.get(), actual.get());
    }

    //done
    @Test
    public void testLast() {
        Optional<Integer> expected = Optional.of(9);
        Iterable<Integer> number = asList(1, 4, 10, 2, 7, 9);
        Optional<Integer> actual = last(number);
        System.out.println(actual.get());
        assertEquals(expected.get(), actual.get());
    }

    //done
    @Test
    public void testTakeWhile() {
        Iterable<Integer> expected = asList(2, 4);
        Iterable<Integer> number = asList(2, 4, 3, 5, 8, 7);
        Iterable<Integer> actual = takeWhile(number, n -> n % 2 == 0);
        actual.forEach(System.out::println);
        assertEquals(expected, toList(actual));
    }

    //done
    @Test
    public void testFlatMap() {

        List<Character> expected = List.of('i', 's', 'e', 'l', 's', 'u', 'p', 'e', 'r', 'o', 'l', 'a');
        Iterable<String> sequence = List.of("isel", "super", "ola");

        Function<String, Iterable<Character>> func = (s) -> {
            List<Character> res = new ArrayList<>();
            char[] carater = s.toCharArray();
            for (int i = 0; i < s.length(); i++) {
                res.add(carater[i]);
            }
            return res;
        };

        List<Character> actual = new ArrayList<>();

        Iterable<Character> let = flatMap(sequence, func);
        for (Character s : let) {
            actual.add(s);
        }
        assertArrayEquals(expected.toArray(), actual.toArray());
    }

    @Test
    public void testGenerateRandomIntegers() {
        Random rand = new Random();
        Iterator<Integer> nrs = generate(rand::nextInt).iterator();
        System.out.println(nrs.next());
        System.out.println(nrs.next());
        System.out.println(nrs.next());
    }

    int init;

    @Test
    public void testGenerateEvenIntegers() {
        Iterator<Integer> expected = asList(0, 2, 4, 6).iterator();
        init = 0;
        Iterable<Integer> actual = limit(filter(generate(() -> init++), n -> n % 2 == 0), 4);
        actual.forEach(curr -> assertEquals(expected.next(), curr));
        assertFalse(expected.hasNext());
    }

    @Test
    public void filterEvenNumbers() {
        Iterable<Integer> nrs = asList(1, 2, 3, 4, 5, 6, 7);
        Iterator<Integer> expected = asList(2, 4, 6).iterator();
        Iterator<Integer> actual = filter(nrs, n -> n % 2 == 0).iterator();
        while (actual.hasNext()) {
            Integer curr = actual.next();
            assertEquals(expected.next(), curr);
        }
        assertFalse(expected.hasNext());
    }

    //Done
    @Test
    public void cacheTest() {
        Random r = new Random();
        Iterable<Integer> it = generate(() -> r.nextInt(100));
        it = cache(it);
        Object[] expected = toArray(limit(it, 10));
        for (Object i : expected) {
            System.out.print(i + " ");
        }
        Object[] actual = toArray(limit(it, 10));
        System.out.println();
        for (Object i : actual) {
            System.out.print(i + " ");
        }
        System.out.println();
        assertArrayEquals(expected, actual);
    }
}
